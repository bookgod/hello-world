import matplotlib.pyplot
import numpy
import scipy.special
class neuralnetwork:
    def __init__(self,inputnodes,hiddennodes,outputnodes,learningrate):
       
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        self.lr = learningrate
        self.win = numpy.random.normal(0.0,pow(self.hnodes,-0.5),(self.hnodes,self.inodes))
        self.who = numpy.random.normal(0.0,pow(self.onodes,-0.5),(self.onodes,self.hnodes))
        
        pass
    def train(self,inputs_list,targets_list):
        inputs = numpy.array(inputs_list,ndmin=2).T
        targets = numpy.array(targets_list,ndmin=2).T
        
        hidden_inputs = numpy.dot(self.win,inputs)
        self.activation_function = lambda x:scipy.special.expit(x)
        hidden_outputs=self.activation_function(hidden_inputs)
        
        final_inputs =numpy.dot(self.who,hidden_outputs)
        final_outputs=self.activation_function(final_inputs)
        
        output_errors = targets - final_outputs
        
        hidden_errors = numpy.dot(self.who.T,output_errors)
        
        self.who += self.lr*numpy.dot((output_errors*final_outputs*(1.0 - final_outputs)),numpy.transpose(hidden_outputs))
        self.win += self.lr*numpy.dot((hidden_errors*hidden_outputs*(1.0 - hidden_outputs)),numpy.transpose(inputs))
                                      
        pass
    
    def query(self,inputs):
        
        hidden_inputs = numpy.dot(self.win,inputs)
        
        self.activation_function = lambda x:scipy.special.expit(x)
        
        hidden_outputs=self.activation_function(hidden_inputs)
        final_inputs =numpy.dot(self.who,hidden_outputs)
        final_outputs=self.activation_function(final_inputs)
        
        return final_outputs
		
	data_file = open("mnist_train.csv",'r')
    data_list = data_file.readlines()
    data_file.close()
	
	inputnodes=784
    hiddennodes=100
    outputnodes=10
    learningrate=0.1
    n = neuralnetwork(inputnodes,hiddennodes,outputnodes,learningrate)
	epochs = 5
    for e in range(epochs):
    
        for record in data_list:
            all_values = record.split(',')
            inputs=(numpy.asfarray(all_values[1:])/255.0*0.99)+0.01
            targets=numpy.zeros(outputnodes)+0.01
            targets[int(all_values[0])] = 0.99
            n.train(inputs,targets)
            pass
        pass
	data_file = open("mnist_test.csv",'r')
    data_list = data_file.readlines()
    data_file.close()
	scorecard = []
    for record in data_list:
        all_values = record.split(',')
        correct_label= int(all_values[0])
        print(correct_label,"correct label")
        inputs=(numpy.asfarray(all_values[1:])/255.0*0.99)+0.01
        outputs = n.query(inputs)
        label = numpy.argmax(outputs)
        print(label,"network's answer")
        if (label == correct_label):
             scorecard.append(1)
        else:
            scorecard.append(0)
            pass
        pass
    scorecard_array = numpy.asarscorecard_array = numpy.asarray(scorecard)
    print("performance =",scorecard_array.sum()/scorecard_array.size)ray(scorecard)
	
